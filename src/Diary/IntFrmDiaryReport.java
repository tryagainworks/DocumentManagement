/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Diary;

import Model.DefaultComboBoxModelDrvd;
import Model.DefaultListModelDrvd;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import myframework.pkgGUIContainers.ClsGUIContainers;
import myframework.pkgGUIContainers.ClsToolbarOperation;
import myframework.pkgGUIControls.ToolbarInterface;
import myframework.pkgValidations.ClsValidation;
import org.imgscalr.Scalr;

/**
 *
 * @author Win97User
 */
public class IntFrmDiaryReport extends MyLclJInternalFrame implements ToolbarInterface {
    /**
     * Creates new form NewJInternalFrame
     */
    static IntFrmDiaryReport objFrm;
    BufferedImage img = new BufferedImage(1, 1, BufferedImage.TYPE_INT_RGB);
    BufferedImage newimg = null;
    int intImgZoomSize = 0;
    String strTopic = "";
    int intLastAcsdListID = -1;
    ArrayList<ClsContentProperties> arlCurntTopicContents = new ArrayList<>();
    DefaultListModelDrvd<String, Integer> dlmListText = new DefaultListModelDrvd<>(false);
    DefaultComboBoxModelDrvd<String, Integer> dcmGroups = new DefaultComboBoxModelDrvd<>(true);
    ArrayList<Integer> arlTopicId = new ArrayList<>();
    JLabel lblLastBordered = null;

    public IntFrmDiaryReport() {
        initComponents();
        pnl.fnAddSubCommand(pnl.EDIT_COMMAND, new HashMap<Integer, String>() {
            {
                put(clsEdit.CONTENT, "Content");
                put(clsEdit.TOPIC_ORDER, "Topic Order");
                put(clsEdit.TOPIC, "Topic");
                put(clsEdit.GROUP_MAPPING, "Group Mapping");
            }
        });
        scrllContent.getVerticalScrollBar().setUnitIncrement(16);
        fnCreateResizeLevelMenuItems();
        fnLoadGroupInCombo();
    }

    //singleton object
    public static IntFrmDiaryReport self() {
        if (objFrm == null) {
            objFrm = new IntFrmDiaryReport();
            objFrm.setSize(1200, 700);
        }
        return objFrm;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mnuPopup = new javax.swing.JPopupMenu();
        mnuText = new javax.swing.JMenu();
        mniAppendText = new javax.swing.JMenuItem();
        mniInsertText = new javax.swing.JMenuItem();
        mnuResizeText = new javax.swing.JMenu();
        mnuImage = new javax.swing.JMenu();
        mniAppendImageFile = new javax.swing.JMenuItem();
        mniAppendImageClipboard = new javax.swing.JMenuItem();
        mniAppendImageCamera = new javax.swing.JMenuItem();
        mniAppendImageScreen = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        mniInsertImageFile = new javax.swing.JMenuItem();
        mniInsertImageClipboard = new javax.swing.JMenuItem();
        mniInsertImageCamera = new javax.swing.JMenuItem();
        mniInsertImageScreen = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        mnuResizeImage = new javax.swing.JMenu();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        mniEditContent = new javax.swing.JMenuItem();
        mniDeleteContent = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        mniMoveUp = new javax.swing.JMenuItem();
        mniMoveDown = new javax.swing.JMenuItem();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        scrllContent = new javax.swing.JScrollPane();
        pnlDisplayArea = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        txtSearch = new javax.swing.JTextField();
        cboTopicGroup = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstTopics = new org.jdesktop.swingx.JXList();

        mnuText.setText("Text");

        mniAppendText.setText("Append Text");
        mniAppendText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniAppendTextActionPerformed(evt);
            }
        });
        mnuText.add(mniAppendText);

        mniInsertText.setText("Insert Text");
        mniInsertText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniInsertTextActionPerformed(evt);
            }
        });
        mnuText.add(mniInsertText);

        mnuResizeText.setText("Resize Text");
        mnuText.add(mnuResizeText);

        mnuPopup.add(mnuText);

        mnuImage.setText("Image");

        mniAppendImageFile.setText("Append Image [File]");
        mniAppendImageFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniAppendImageFileActionPerformed(evt);
            }
        });
        mnuImage.add(mniAppendImageFile);

        mniAppendImageClipboard.setText("Append Image [Clipboard]");
        mniAppendImageClipboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniAppendImageClipboardActionPerformed(evt);
            }
        });
        mnuImage.add(mniAppendImageClipboard);

        mniAppendImageCamera.setText("Append Image [Camera]");
        mniAppendImageCamera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniAppendImageCameraActionPerformed(evt);
            }
        });
        mnuImage.add(mniAppendImageCamera);

        mniAppendImageScreen.setText("Append Image [Screen]");
        mniAppendImageScreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniAppendImageScreenActionPerformed(evt);
            }
        });
        mnuImage.add(mniAppendImageScreen);
        mnuImage.add(jSeparator5);

        mniInsertImageFile.setText("Insert Image [File]");
        mniInsertImageFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniInsertImageFileActionPerformed(evt);
            }
        });
        mnuImage.add(mniInsertImageFile);

        mniInsertImageClipboard.setText("Insert Image [Camera]");
        mniInsertImageClipboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniInsertImageClipboardActionPerformed(evt);
            }
        });
        mnuImage.add(mniInsertImageClipboard);

        mniInsertImageCamera.setText("Insert Image [Camera]");
        mniInsertImageCamera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniInsertImageCameraActionPerformed(evt);
            }
        });
        mnuImage.add(mniInsertImageCamera);

        mniInsertImageScreen.setText("Insert Image [Screen]");
        mniInsertImageScreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniInsertImageScreenActionPerformed(evt);
            }
        });
        mnuImage.add(mniInsertImageScreen);
        mnuImage.add(jSeparator6);

        mnuResizeImage.setText("Resize Image");
        mnuImage.add(mnuResizeImage);

        mnuPopup.add(mnuImage);
        mnuPopup.add(jSeparator2);

        mniEditContent.setText("Edit Content");
        mniEditContent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniEditContentActionPerformed(evt);
            }
        });
        mnuPopup.add(mniEditContent);

        mniDeleteContent.setText("Delete Content");
        mniDeleteContent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniDeleteContentActionPerformed(evt);
            }
        });
        mnuPopup.add(mniDeleteContent);
        mnuPopup.add(jSeparator3);

        mniMoveUp.setText("Move Up");
        mniMoveUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniMoveUpActionPerformed(evt);
            }
        });
        mnuPopup.add(mniMoveUp);

        mniMoveDown.setText("Move Down");
        mniMoveDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniMoveDownActionPerformed(evt);
            }
        });
        mnuPopup.add(mniMoveDown);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Diary Report");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        pnlDisplayArea.setBackground(new java.awt.Color(233, 224, 224));
        pnlDisplayArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnlDisplayAreaMouseClicked(evt);
            }
        });
        org.jdesktop.swingx.VerticalLayout verticalLayout1 = new org.jdesktop.swingx.VerticalLayout();
        verticalLayout1.setGap(1);
        pnlDisplayArea.setLayout(verticalLayout1);
        scrllContent.setViewportView(pnlDisplayArea);

        jPanel1.add(scrllContent, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.GridLayout(1, 2));

        txtSearch.setFont(new java.awt.Font("Uni Ila.Sundaram-07", 0, 14)); // NOI18N
        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        jPanel2.add(txtSearch);

        cboTopicGroup.setFont(new java.awt.Font("Uni Ila.Sundaram-07", 0, 14)); // NOI18N
        cboTopicGroup.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboTopicGroup.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboTopicGroupItemStateChanged(evt);
            }
        });
        cboTopicGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTopicGroupActionPerformed(evt);
            }
        });
        jPanel2.add(cboTopicGroup);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jSplitPane1.setRightComponent(jPanel1);

        lstTopics.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        lstTopics.setFont(new java.awt.Font("Uni Ila.Sundaram-07", 0, 14)); // NOI18N
        lstTopics.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstTopicsMouseClicked(evt);
            }
        });
        lstTopics.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                lstTopicsKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(lstTopics);

        jSplitPane1.setLeftComponent(jScrollPane1);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fnInitiateAddImageByFile(int intPosition) {
        img = fnDeleteImageBuffer(img);
        JFileChooser ctrlFC = new JFileChooser();

        int intResult = ctrlFC.showOpenDialog(this);
        if (intResult == JFileChooser.ERROR_OPTION || intResult == JFileChooser.CANCEL_OPTION) {
            return;
        }
        fnAddImageToLbl(ctrlFC.getSelectedFile(), 0, 0, 100, intPosition);
        //pnlDisplayArea.validate();
    }

    private BufferedImage fnDeleteImageBuffer(BufferedImage img) {
        img.flush();
        img = null;
        img = new BufferedImage(1, 1, BufferedImage.TYPE_INT_RGB);
        return img;
    }

    private void fnInitiateAddImageByClipboard(int intPosition) {
        img = fnDeleteImageBuffer(img);

        Clipboard clip = Toolkit.getDefaultToolkit().getSystemClipboard();
        try {
            img = (BufferedImage) clip.getData(DataFlavor.imageFlavor);
        } catch (UnsupportedFlavorException | IOException ex) {
            JOptionPane.showMessageDialog(this, "No image copied..");
        }

        fnAddImageToLbl(null, 0, 0, 100, intPosition);
    }

    private void fnResizeImage(JLabel lbl, int intPercentage) {
        intImgZoomSize = intPercentage;
        Point p = new Point((intPercentage * img.getWidth()) / 100, (intPercentage * img.getHeight()) / 100);
        fnResizeImage(lbl, p);
    }

    private void fnResizeImage(JLabel lbl, Point p) {
        newimg = Scalr.resize(img, Scalr.Method.SPEED, Scalr.Mode.FIT_TO_WIDTH,
                p.x, p.y, Scalr.OP_ANTIALIAS, Scalr.OP_BRIGHTER);
        JLabel l = lbl;
        l.setIcon(new ImageIcon(newimg));

        newimg = fnDeleteImageBuffer(newimg);
        l.setSize(p.x, p.y);
        ClsContentProperties c = arlCurntTopicContents.get(pnlDisplayArea.getComponentZOrder(lbl));
        arlCurntTopicContents.set(pnlDisplayArea.getComponentZOrder(lbl), c.fnImgResize(p.x, p.y, intImgZoomSize));
    }

    private void fnResizeImage(JLabel lbl) {
        Point p = new Point(img.getWidth() - (img.getWidth() / 25) * intImgZoomSize, img.getHeight() - (img.getHeight() / 25) * intImgZoomSize);
        fnResizeImage(lbl, p);
    }

    private void fnInitiateAddText(int intPosition) {
        img = fnDeleteImageBuffer(img);
        String str = DlgGetText.self().fnShow("Enter Text Content for the topic : " + lstTopics.getSelectedValue().toString());// .txtText.getText();
        arlCurntTopicContents.add(intPosition, new ClsContentProperties(5, str, "Text"));
        fnAddTextToLbl(str, intPosition, 5);
        //pnlDisplayArea.validate();
    }

    private void fnRemoveAllContents() {
        Component[] objC = pnlDisplayArea.getComponents();
        for (Component c : objC) {
            JLabel lbl = (JLabel) c;
            lbl.setIcon(null);
            lbl.setText("");
            pnlDisplayArea.remove(lbl);
            lbl = null;
        }
        pnlDisplayArea.validate();
        pnlDisplayArea.updateUI();
    }

    private void mniAppendTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniAppendTextActionPerformed
        // TODO add your handling code here:
        fnInitiateAddText(pnlDisplayArea.getComponentCount());
    }//GEN-LAST:event_mniAppendTextActionPerformed

    private void mniAppendImageFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniAppendImageFileActionPerformed
        // TODO add your handling code here:
        fnInitiateAddImageByFile(pnlDisplayArea.getComponentCount());
    }//GEN-LAST:event_mniAppendImageFileActionPerformed

    private void mniInsertTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniInsertTextActionPerformed
        // TODO add your handling code here:
        JLabel lbl = fnGetPopupInvokerLbl(evt);
        fnInitiateAddText(pnlDisplayArea.getComponentZOrder(lbl));
    }//GEN-LAST:event_mniInsertTextActionPerformed

    private void mniInsertImageFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniInsertImageFileActionPerformed
        // TODO add your handling code here:
        JLabel lbl = fnGetPopupInvokerLbl(evt);
        fnInitiateAddImageByFile(pnlDisplayArea.getComponentZOrder(lbl));
    }//GEN-LAST:event_mniInsertImageFileActionPerformed

    private JLabel fnGetPopupInvokerLbl(java.awt.event.ActionEvent evt) {
        JLabel lbl = (JLabel) ((JPopupMenu) ((JMenuItem) evt.getSource()).getParent()).getInvoker();
        return lbl;
    }

    private void mniEditContentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniEditContentActionPerformed
        // TODO add your handling code here:
        JLabel lbl = fnGetPopupInvokerLbl(evt);
        fnEditLabelContent(lbl);
    }//GEN-LAST:event_mniEditContentActionPerformed

    private void pnlDisplayAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlDisplayAreaMouseClicked
        // TODO add your handling code here:
        if (evt.getButton() == MouseEvent.BUTTON3 && (pnl.ACTIVE_SAVE_MODE == pnl.ADD_SAVE_MODE || (pnl.ACTIVE_SAVE_MODE == pnl.EDIT_SAVE_MODE && pnl.ACTIVE_SAVE_SUB_MODE[0] == clsEdit.CONTENT))) {
            fnMenuItemEnable(false, null);
            mnuPopup.show(pnlDisplayArea, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_pnlDisplayAreaMouseClicked

    private void mniDeleteContentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniDeleteContentActionPerformed
        // TODO add your handling code here:
        JLabel lbl = fnGetPopupInvokerLbl(evt);
        int intPosition = pnlDisplayArea.getComponentZOrder(lbl);
        pnlDisplayArea.remove(lbl);
        arlCurntTopicContents.remove(intPosition);
        pnlDisplayArea.validate();
        pnlDisplayArea.updateUI();
    }//GEN-LAST:event_mniDeleteContentActionPerformed

    private void mniMoveUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniMoveUpActionPerformed
        // TODO add your handling code here:
        JLabel lbl = fnGetPopupInvokerLbl(evt);
        int intPosition = pnlDisplayArea.getComponentZOrder(lbl);
        if (intPosition > 0) {
            pnlDisplayArea.setComponentZOrder(lbl, intPosition - 1);
            ClsContentProperties c = arlCurntTopicContents.get(intPosition);
            arlCurntTopicContents.remove(intPosition);
            arlCurntTopicContents.add(intPosition - 1, c);
        } else {
            JOptionPane.showMessageDialog(this, "Can't be moved");
        }
        pnlDisplayArea.validate();
    }//GEN-LAST:event_mniMoveUpActionPerformed

    private void mniMoveDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniMoveDownActionPerformed
        // TODO add your handling code here:
        JLabel lbl = fnGetPopupInvokerLbl(evt);
        int intPosition = pnlDisplayArea.getComponentZOrder(lbl);
        if (intPosition < pnlDisplayArea.getComponentCount() - 1) {
            pnlDisplayArea.setComponentZOrder(lbl, intPosition + 1);
            ClsContentProperties c = arlCurntTopicContents.get(intPosition);
            arlCurntTopicContents.remove(intPosition);
            arlCurntTopicContents.add(intPosition + 1, c);
        } else {
            JOptionPane.showMessageDialog(this, "Can't be moved");
        }
        pnlDisplayArea.validate();
    }//GEN-LAST:event_mniMoveDownActionPerformed

    private void fnLoadGroupInCombo() {
        try {
            String strQuery = "select a.group_name, a.tbl_id from TBL_TOPIC_GROUP_TEMP a order by a.group_name";
            ResultSet rs = objDBHSQ.fnSelectQuery("one", strQuery);
            while (rs.next()) {
                dcmGroups.addElementWithID(rs.getString(1), rs.getInt(2));
            }

            cboTopicGroup.setModel(dcmGroups);
        } catch (SQLException ex) {
            Logger.getLogger(IntFrmDiaryReport.class.getName()).log(Level.SEVERE, null, ex);
            ClsGUIContainers.self(objMainFrom.txtLogs).fnDisplayError("Database Open Error : " + ex.getMessage(), "", "");
        }
    }

    private void fnCreateResizeLevelMenuItems() {
        for (int iCount = 1; iCount <= 20; iCount++) {
            JMenuItem mni = new JMenuItem("" + (iCount * 5) + " %");
            mni.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    fnResizeImage((JLabel) ((JPopupMenu) mnuResizeImage.getParent()).getInvoker(),
                            Integer.parseInt(mni.getText().replace(" %", "")));
                }
            });
            mnuResizeImage.add(mni);
        }
        for (int iCount = 1; iCount <= 10; iCount++) {
            JMenuItem mni = new JMenuItem("" + iCount);
            mni.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    fnResizeText((JLabel) ((JPopupMenu) mnuResizeImage.getParent()).getInvoker(),
                            Integer.parseInt(mni.getText()));
                }
            });
            mnuResizeText.add(mni);
        }
    }

    private void fnTopicSelected() {
        int intLastAcsdListID_temp = intLastAcsdListID;

        // TODO add your handling code here:
        if (!dlmListText.isEmpty()) {
            intLastAcsdListID = arlTopicId.get(lstTopics.getSelectedIndex());
            //avoid reload when clicking the same topic again
            if (intLastAcsdListID_temp == intLastAcsdListID) {
                return;
            }
            lblLastBordered = null;
            fnRemoveAllContents();
            ResultSet rs;
            try {
                rs = objDBHSQ.fnSelectQuery("one", "select TOPIC_TYPE, TOPIC_CONTENT, IMAGE_WIDTH,IMAGE_HEIGHT,IMAGE_ZOOM_PERCENTAGE,TEXT_SIZE, IMAGE_DATA from tbl_topic_details_temp where row_state_1 = 0 and row_state_2 = 0 and REF_TBL_TOPIC_ID = " + intLastAcsdListID + " order by TOPIC_ORDER");
                ClsContentProperties c = null;
                arlCurntTopicContents.clear();
                while (rs.next()) {
                    if (rs.getString(1).equals("Text")) {
                        c = new ClsContentProperties(rs.getInt(6), rs.getString(2), rs.getString(1));
                        arlCurntTopicContents.add(c);
                        fnAddTextToLbl(c.strContent, pnlDisplayArea.getComponentCount(), c.intTextSize);
                    } else {
                        c = new ClsContentProperties(rs.getInt(3), rs.getInt(4), rs.getInt(5), rs.getString(2), rs.getString(1));
                        arlCurntTopicContents.add(c);
                        if (rs.getBytes(7) == null) {
                            fnAddImageToLbl(new File(c.strContent), c.intWidth, c.intHeight, c.intImageZoom, pnlDisplayArea.getComponentCount());
                            img = fnDeleteImageBuffer(img);
                        } else if (rs.getBytes(7).length > 1) {
                            JLabel lbl = fnCreateLabelCtrl(arlCurntTopicContents.size() - 1);
                            lbl.setIcon(new ImageIcon(rs.getBytes(7)));
                        } else {
                            fnAddImageToLbl(new File(c.strContent), c.intWidth, c.intHeight, c.intImageZoom, pnlDisplayArea.getComponentCount());
                            img = fnDeleteImageBuffer(img);
                        }
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(IntFrmDiaryReport.class.getName()).log(Level.SEVERE, null, ex);
                ClsGUIContainers.self(objMainFrom.txtLogs).fnDisplayError("Database Open Error : " + ex.getMessage(), "", "");
            }
            pnlDisplayArea.validate();
        } else {
            fnRemoveAllContents();
        }
    }

    private void lstTopicsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstTopicsMouseClicked
        // TODO add your handling code here:
        fnTopicSelected();
    }//GEN-LAST:event_lstTopicsMouseClicked

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
        int intSelectedIndex = lstTopics.getSearchable().search(txtSearch.getText());
        if (intSelectedIndex != -1) {
            lstTopics.setSelectedIndex(intSelectedIndex);
            lstTopicsMouseClicked(null);
        }
    }//GEN-LAST:event_txtSearchActionPerformed

    private void mniAppendImageCameraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniAppendImageCameraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mniAppendImageCameraActionPerformed

    private void mniInsertImageCameraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniInsertImageCameraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mniInsertImageCameraActionPerformed

    private void cboTopicGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTopicGroupActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboTopicGroupActionPerformed

    private void cboTopicGroupItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboTopicGroupItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            fnReloadEvent(null, ' ', ' ');
        }
    }//GEN-LAST:event_cboTopicGroupItemStateChanged

    private void mniAppendImageClipboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniAppendImageClipboardActionPerformed
        // TODO add your handling code here:
        fnInitiateAddImageByClipboard(pnlDisplayArea.getComponentCount());
    }//GEN-LAST:event_mniAppendImageClipboardActionPerformed

    private void mniInsertImageClipboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniInsertImageClipboardActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mniInsertImageClipboardActionPerformed

    private void mniAppendImageScreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniAppendImageScreenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mniAppendImageScreenActionPerformed

    private void mniInsertImageScreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniInsertImageScreenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mniInsertImageScreenActionPerformed

    private void lstTopicsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lstTopicsKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            fnTopicSelected();
        }
    }//GEN-LAST:event_lstTopicsKeyPressed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // TODO add your handling code here:
        if (fnWhenClose()) {
            this.setDefaultCloseOperation(JInternalFrame.DISPOSE_ON_CLOSE);
        }
    }//GEN-LAST:event_formInternalFrameClosing

    private void fnMenuItemEnable(boolean blnEnabled, JLabel lbl) {
        mniDeleteContent.setEnabled(blnEnabled);
        mniInsertImageFile.setEnabled(blnEnabled);
        mniInsertImageCamera.setEnabled(blnEnabled);
        mniInsertImageClipboard.setEnabled(blnEnabled);
        mniInsertText.setEnabled(blnEnabled);
        mniMoveDown.setEnabled(blnEnabled);
        mniMoveUp.setEnabled(blnEnabled);
        mniEditContent.setEnabled(blnEnabled);
        mnuResizeImage.setEnabled(blnEnabled);
        mnuResizeText.setEnabled(blnEnabled);
        if (blnEnabled) {
            if (lbl.getIcon() == null) {
                mnuResizeImage.setEnabled(false);
                mnuResizeText.setEnabled(true);
            } else {
                mnuResizeImage.setEnabled(true);
                mnuResizeText.setEnabled(false);
            }
        }
    }

    private JLabel fnCreateLabelCtrl(int intPosition) {
        JLabel lbl = new JLabel();
        lbl.setFont(new java.awt.Font("Uni Ila.Sundaram-07", 0, 18));
        pnlDisplayArea.add(lbl);
        pnlDisplayArea.validate();
        lbl.setBorder(BorderFactory.createLineBorder(Color.gray));

        lbl.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (evt.getClickCount() == 1 && evt.getButton() == MouseEvent.BUTTON3 && (pnl.ACTIVE_SAVE_MODE == pnl.ADD_SAVE_MODE || (pnl.ACTIVE_SAVE_MODE == pnl.EDIT_SAVE_MODE && pnl.ACTIVE_SAVE_SUB_MODE[0] == clsEdit.CONTENT))) {
                    fnMenuItemEnable(true, lbl);
                    mouseSingleClicked(evt);
                    mnuPopup.show(lbl, evt.getX(), evt.getY());
                }
            }
        });
        return lbl;
    }

    private void fnResizeText(JLabel lbl, int intTextSize) {
        JLabel l = lbl;
        ClsContentProperties c = arlCurntTopicContents.get(pnlDisplayArea.getComponentZOrder(lbl));
        lbl.setText("<HTML><font size=" + intTextSize + "><p style=\"color: black; background-color: #E9E0E0\">" + c.strContent + "</p></font></HTML>");
        arlCurntTopicContents.set(pnlDisplayArea.getComponentZOrder(lbl), c.fnTxtResize(intTextSize));
        //lbl.validate();
    }

    private void fnAddTextToLbl(String strText, int intPosition, int intTxtSize) {
        JLabel lbl = fnCreateLabelCtrl(intPosition);
        strText = strText.replaceAll("\n", "<br>");
        lbl.setSize(pnlDisplayArea.getWidth(), 10);
        lbl.setText("<HTML><font size=" + intTxtSize + "><p style=\"color: black; background-color: #E9E0E0\">" + strText + "</p></font></HTML>");
        pnlDisplayArea.setSize(pnlDisplayArea.getWidth(), lbl.getLocation().x + lbl.getHeight());
    }

    private void fnAddImageToLbl(File objFile, int intWidth, int intHeight, int _intZoomSize, int intPosition) {
        intImgZoomSize = _intZoomSize;
        JLabel lbl = fnCreateLabelCtrl(intPosition);
        String strAbsolutePath = "";
        lbl.setBorder(BorderFactory.createLineBorder(Color.ORANGE));
        if (objFile != null) {//if this method called by clipboard data instead of a file
            try {
                img = ImageIO.read(objFile);
                strAbsolutePath = objFile.getAbsolutePath();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        if (_intZoomSize < 100) {
            fnResizeImage(lbl, new Point(intWidth, intHeight));
            return;
        }
        lbl.setIcon(new ImageIcon(img));
        arlCurntTopicContents.add(intPosition, new ClsContentProperties(img.getWidth(), img.getHeight(), intImgZoomSize, strAbsolutePath, "Image"));
        pnlDisplayArea.setSize(pnlDisplayArea.getWidth(), lbl.getLocation().x + lbl.getHeight());
        intImgZoomSize = 0;
    }

    private void mouseSingleClicked(java.awt.event.MouseEvent evt) {
        JLabel lbl = (JLabel) evt.getComponent();
        if (lblLastBordered != null) {
            lblLastBordered.setBorder(BorderFactory.createEmptyBorder());
        }
        lblLastBordered = lbl;
        lbl.setBorder(BorderFactory.createRaisedSoftBevelBorder());
        if (lbl.getIcon() != null) {
            ClsContentProperties c = arlCurntTopicContents.get(pnlDisplayArea.getComponentZOrder(lbl));

            try {
                if (!c.strContent.equals("")) {
                    img = ImageIO.read(new File(c.strContent));
                } else {
                    img = fnGetImageAsBuffer(lbl);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }

            intImgZoomSize = c.intImageZoom;

        }
    }

    private void fnEditLabelContent(JLabel _lbl) {
        JLabel lbl = _lbl;
        if (lbl.getIcon() == null) {
            String str = DlgGetText.self().fnShow("Edit Text Content for the topic : " + lstTopics.getSelectedValue().toString(), arlCurntTopicContents.get(pnlDisplayArea.getComponentZOrder(lbl)).strContent); //dlgGetText.self().txtText.getText();
            ClsContentProperties c = arlCurntTopicContents.get(pnlDisplayArea.getComponentZOrder(lbl));
            arlCurntTopicContents.set(pnlDisplayArea.getComponentZOrder(lbl), c.fnResetContent(str));
            str = str.replaceAll("\n", "<br>");
            lbl.setText("<HTML><font size=" + c.intTextSize + "><p style=\"color: black; background-color: #E9E0E0\">" + str + "</p></font></HTML>");
        } else if ((JOptionPane.showConfirmDialog(this, "Do you want to change the image?", "Change Image Request", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE)) == JOptionPane.YES_OPTION) {
            JFileChooser ctrlFC = new JFileChooser();
            int intResult = ctrlFC.showOpenDialog(this);
            if (intResult == JFileChooser.ERROR_OPTION || intResult == JFileChooser.CANCEL_OPTION) {
                return;
            }
            try {
                img = ImageIO.read(ctrlFC.getSelectedFile());
            } catch (IOException e) {
                e.printStackTrace();
            }
            lbl.setIcon(new ImageIcon(img));
            arlCurntTopicContents.set(pnlDisplayArea.getComponentZOrder(lbl), new ClsContentProperties(img.getWidth(), img.getHeight(), intImgZoomSize, ctrlFC.getSelectedFile().getAbsolutePath(), "Image"));
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cboTopicGroup;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JSplitPane jSplitPane1;
    private org.jdesktop.swingx.JXList lstTopics;
    private javax.swing.JMenuItem mniAppendImageCamera;
    private javax.swing.JMenuItem mniAppendImageClipboard;
    private javax.swing.JMenuItem mniAppendImageFile;
    private javax.swing.JMenuItem mniAppendImageScreen;
    private javax.swing.JMenuItem mniAppendText;
    private javax.swing.JMenuItem mniDeleteContent;
    private javax.swing.JMenuItem mniEditContent;
    private javax.swing.JMenuItem mniInsertImageCamera;
    private javax.swing.JMenuItem mniInsertImageClipboard;
    private javax.swing.JMenuItem mniInsertImageFile;
    private javax.swing.JMenuItem mniInsertImageScreen;
    private javax.swing.JMenuItem mniInsertText;
    private javax.swing.JMenuItem mniMoveDown;
    private javax.swing.JMenuItem mniMoveUp;
    private javax.swing.JMenu mnuImage;
    private javax.swing.JPopupMenu mnuPopup;
    private javax.swing.JMenu mnuResizeImage;
    private javax.swing.JMenu mnuResizeText;
    private javax.swing.JMenu mnuText;
    private javax.swing.JPanel pnlDisplayArea;
    private javax.swing.JScrollPane scrllContent;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    @Override
    public void fnAddNewRecordEvent(ClsToolbarOperation obj, int intSubCmd_1, int intSubCmd_2) {
        try {
            //strTopic = ClsValidation.Self().fnEmptyStringIfNull(JOptionPane.showInputDialog("Enter Topic")).trim();
            strTopic = ClsValidation.Self().fnEmptyStringIfNull(DlgAddTopic.self().fnShow("Enter Topic", "<Add a Topic on " + cboTopicGroup.getSelectedItem().toString() + ">")).trim();
            if (strTopic.equals("")) {
                obj.fnCancelEvent(-1, -1);
                return;
            }
            ResultSet rs = objDBHSQ.fnSelectQuery("one", "select * from tbl_topic_temp where TBL_GROUP_ID_REF = " + dcmGroups.getComboId(cboTopicGroup.getSelectedIndex()) + " and ucase(trim(topic_text)) = '" + strTopic.trim().toUpperCase() + "'");

            while (rs.next()) {
                JOptionPane.showMessageDialog(this, "Topic Already exist");
                obj.fnCancelEvent(-1, -1);
                return;
            }
            fnRemoveAllContents();
            fnDMLEnblDsblCtrls(false);

            dlmListText.addElement(strTopic);
            lstTopics.setSelectedIndex(dlmListText.size() - 1);

        } catch (SQLException ex) {
            Logger.getLogger(IntFrmDiaryReport.class.getName()).log(Level.SEVERE, null, ex);
            ClsGUIContainers.self(objMainFrom.txtLogs).fnDisplayError("Database Open Error : " + ex.getMessage(), "", "");
        }
    }

    private void fnDMLEnblDsblCtrls(boolean blnEnabled) {
        lstTopics.setEnabled(blnEnabled);
        cboTopicGroup.setEnabled(blnEnabled);
    }

    @Override
    public void fnEditExitingRecordEvent(ClsToolbarOperation obj, int intSubCmd_1, int intSubCmd_2) {
        strTopic = "";
        try {
            if (lstTopics.getSelectedIndex() == -1) {
                JOptionPane.showMessageDialog(this, "No topic selected to edit");
                obj.fnCancelEvent(-1, -1);
                return;
            }
            if (intSubCmd_1 == clsEdit.TOPIC) {
                if ((JOptionPane.showConfirmDialog(this, "Do you want to rename the topic?", "Topic Title Change", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE)) == JOptionPane.YES_OPTION) {
                    strTopic = ClsValidation.Self().fnEmptyStringIfNull(DlgAddTopic.self().fnShow("Enter New Topic", lstTopics.getSelectedValue().toString())).trim();
                    if (strTopic.equals("")) {
                        obj.fnCancelEvent(-1, -1);
                        return;
                    }

                    ResultSet rs = objDBHSQ.fnSelectQuery("one", "select * from tbl_topic_temp where ucase(trim(topic_text)) = '" + strTopic.trim().toUpperCase() + "' and tbl_id != " + intLastAcsdListID);

                    while (rs.next()) {
                        JOptionPane.showMessageDialog(this, "Topic Already exist");
                        strTopic = "";
                        obj.fnCancelEvent(-1, -1);
                        return;
                    }

                    dlmListText.setElementAt(strTopic, lstTopics.getSelectedIndex());
                } else {
                    obj.fnCancelEvent(-1, -1);
                    return;
                }
            }
            if (intSubCmd_1 == clsEdit.CONTENT) {
                fnDMLEnblDsblCtrls(false);
            }
        } catch (SQLException ex) {
            Logger.getLogger(IntFrmDiaryReport.class.getName()).log(Level.SEVERE, null, ex);
            ClsGUIContainers.self(objMainFrom.txtLogs).fnDisplayError("Database Open Error : " + ex.getMessage(), "", "");
        }
    }

    @Override
    public void fnSaveNewRecordEvent(ClsToolbarOperation obj, int intSubCmd_1, int intSubCmd_2) {
        String strQuery = "";
        JLabel lbl;
        fnDMLEnblDsblCtrls(true);
        ResultSet rs;
        int intInsertCount = 0;
        try {
            intInsertCount = objDBHSQ.fnInsertQuery("one", "insert into tbl_topic_temp (TOPIC_TEXT,TOPIC_DESC,MODIFIED_AT, TBL_GROUP_ID_REF) values ('" + strTopic + "','" + strTopic + "',null," + dcmGroups.getComboId(cboTopicGroup.getSelectedIndex()) + ")");

            rs = objDBHSQ.fnSelectQuery("one", "select max(tbl_id) from tbl_topic_temp");
            rs.next();

            intLastAcsdListID = rs.getInt(1);
            arlTopicId.add(intLastAcsdListID);
        } catch (SQLException ex) {
            Logger.getLogger(IntFrmDiaryReport.class.getName()).log(Level.SEVERE, null, ex);
            ClsGUIContainers.self(objMainFrom.txtLogs).fnDisplayError("Database Open Error : " + ex.getMessage(), "", "");
        }

        if (intInsertCount != -1) {

            for (int iCount = 0; iCount < pnlDisplayArea.getComponentCount(); iCount++) {
                strQuery = "insert into tbl_topic_details_temp (REF_TBL_TOPIC_ID,TOPIC_TYPE,"
                        + "TOPIC_CONTENT,TOPIC_ORDER,MODIFIED_AT,IMAGE_WIDTH,IMAGE_HEIGHT,"
                        + "IMAGE_ZOOM_PERCENTAGE,TEXT_SIZE,IMAGE_DATA) values (" + intLastAcsdListID;
                ClsContentProperties c = arlCurntTopicContents.get(iCount);
                if (c.strContentType.equals("Image")) {
                    lbl = (JLabel) pnlDisplayArea.getComponent(iCount);
                    strQuery += ",'" + c.strContentType + "','" + arlCurntTopicContents.get(iCount).strContent.replace("'", "''") + "'," + (iCount + 1) + ",null," + c.intWidth + "," + c.intHeight + "," + c.intImageZoom + "," + c.intTextSize + ",?)";
                    try {
                        objDBHSQ.fnInsertQuery("one", strQuery, fnGetImageAsBytes(lbl));
                    } catch (SQLException ex) {
                        Logger.getLogger(IntFrmDiaryReport.class.getName()).log(Level.SEVERE, null, ex);
                        ClsGUIContainers.self(objMainFrom.txtLogs).fnDisplayError("Database Open Error : " + ex.getMessage(), "", "");
                    }
                } else {
                    strQuery += ",'" + c.strContentType + "','" + arlCurntTopicContents.get(iCount).strContent.replace("'", "''") + "'," + (iCount + 1) + ",null," + c.intWidth + "," + c.intHeight + "," + c.intImageZoom + "," + c.intTextSize + ",'')";
                    try {
                        objDBHSQ.fnInsertQuery("one", strQuery);
                    } catch (SQLException ex) {
                        Logger.getLogger(IntFrmDiaryReport.class.getName()).log(Level.SEVERE, null, ex);
                        ClsGUIContainers.self(objMainFrom.txtLogs).fnDisplayError("Database Open Error : " + ex.getMessage(), "", "");
                    }
                }
            }
            //fnReloadEvent(obj);
        }
    }

    @Override
    public void fnReloadEvent(ClsToolbarOperation obj, int intSubCmd_1, int intSubCmd_2) {
        strTopic = "";
        ResultSet rs;
        String strQuery = "";
        dlmListText.clear();
        arlTopicId.clear();
        fnRemoveAllContents();
        try {
            strQuery = "select a.TOPIC_TEXT as Topic, a.TBL_ID as TOPIC_ID from TBL_TOPIC_TEMP a where a.TBL_GROUP_ID_REF = " + dcmGroups.getComboId(cboTopicGroup.getSelectedIndex()) + " and a.row_state_1 = 0 and a.row_state_2 = 0 order by a.tbl_id";
            rs = objDBHSQ.fnSelectQuery("one", strQuery);
            while (rs.next()) {
                dlmListText.addElement(rs.getString(1));
                arlTopicId.add(rs.getInt(2));
            }
            lstTopics.setModel(dlmListText);
            if (dlmListText.size() > 0) {
                lstTopics.setSelectedIndex(0);
                lstTopicsMouseClicked(null);
            }

        } catch (SQLException ex) {
            Logger.getLogger(IntFrmDiaryReport.class.getName()).log(Level.SEVERE, null, ex);
            ClsGUIContainers.self(objMainFrom.txtLogs).fnDisplayError("Database Open Error : " + ex.getMessage(), "", "");
        }
    }

    private byte[] fnGetImageAsBytes(JLabel lbl) {
        Icon icon = lbl.getIcon();
        BufferedImage bi = new BufferedImage(
                icon.getIconWidth(),
                icon.getIconHeight(),
                BufferedImage.TYPE_INT_RGB);
        Graphics g = bi.createGraphics();
        // paint the Icon to the BufferedImage.
        icon.paintIcon(null, g, 0, 0);
        g.dispose();
        ByteArrayOutputStream tmp = new ByteArrayOutputStream();
        try {
            ImageIO.write(bi, "png", tmp);
            tmp.close();
        } catch (Exception ex) {
            Logger.getLogger(IntFrmDiaryReport.class.getName()).log(Level.SEVERE, null, ex);
            ClsGUIContainers.self(objMainFrom.txtLogs).fnDisplayError("Database Open Error : " + ex.getMessage(), "", "");
        }
        return tmp.toByteArray();
    }

    private BufferedImage fnGetImageAsBuffer(JLabel lbl) {
        Icon icon = lbl.getIcon();
        BufferedImage bi = new BufferedImage(
                icon.getIconWidth(),
                icon.getIconHeight(),
                BufferedImage.TYPE_INT_RGB);
        Graphics g = bi.createGraphics();
        // paint the Icon to the BufferedImage.
        icon.paintIcon(null, g, 0, 0);
        g.dispose();
        return bi;
    }

    /**
     *
     * @param obj
     * @param subCommand
     * @param flagReserved
     */
    @Override
    public void fnSaveExistingRecordEvent(ClsToolbarOperation obj, int intSubCmd_1, int intSubCmd_2) {
        JLabel lbl;
        String strQuery = "";
        fnDMLEnblDsblCtrls(true);

        if (pnl.ACTIVE_SAVE_SUB_MODE[0] == clsEdit.TOPIC) {
            if (!strTopic.equals("")) {
                try {
                    objDBHSQ.fnUpdateQuery("one", "update tbl_topic_temp set topic_text='" + strTopic + "' where TBL_ID = " + intLastAcsdListID);
                } catch (SQLException ex) {
                    Logger.getLogger(IntFrmDiaryReport.class.getName()).log(Level.SEVERE, null, ex);
                    ClsGUIContainers.self(objMainFrom.txtLogs).fnDisplayError("Database Open Error : " + ex.getMessage(), "", "");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Topic unchanged");
            }
        }
        if (pnl.ACTIVE_SAVE_SUB_MODE[0] == clsEdit.CONTENT) {
            try {
                objDBHSQ.fnUpdateQuery("one", "update tbl_topic_details_temp set row_state_1 = -1, row_state_2 = -1, image_data=null where REF_TBL_TOPIC_ID = " + intLastAcsdListID);
            } catch (SQLException ex) {
                Logger.getLogger(IntFrmDiaryReport.class.getName()).log(Level.SEVERE, null, ex);
                ClsGUIContainers.self(objMainFrom.txtLogs).fnDisplayError("Database Open Error : " + ex.getMessage(), "", "");
            }

            for (int iCount = 0; iCount < pnlDisplayArea.getComponentCount(); iCount++) {
                strQuery = "insert into tbl_topic_details_temp (REF_TBL_TOPIC_ID,TOPIC_TYPE,"
                        + "TOPIC_CONTENT,TOPIC_ORDER,CREATED_AT,IMAGE_WIDTH,IMAGE_HEIGHT,"
                        + "IMAGE_ZOOM_PERCENTAGE,TEXT_SIZE,IMAGE_DATA) values (" + intLastAcsdListID;

                ClsContentProperties c = arlCurntTopicContents.get(iCount);
                if (c.strContentType.equals("Image")) {
                    lbl = (JLabel) pnlDisplayArea.getComponent(iCount);
                    strQuery += ",'" + c.strContentType + "','" + arlCurntTopicContents.get(iCount).strContent.replace("'", "''") + "'," + (iCount + 1) + ",null," + c.intWidth + "," + c.intHeight + "," + c.intImageZoom + "," + c.intTextSize + ",?)";
                    try {
                        objDBHSQ.fnInsertQuery("one", strQuery, fnGetImageAsBytes(lbl));
                    } catch (SQLException ex) {
                        Logger.getLogger(IntFrmDiaryReport.class.getName()).log(Level.SEVERE, null, ex);
                        ClsGUIContainers.self(objMainFrom.txtLogs).fnDisplayError("Database Open Error : " + ex.getMessage(), "", "");
                    }
                } else {
                    strQuery += ",'" + c.strContentType + "','" + arlCurntTopicContents.get(iCount).strContent.replace("'", "''") + "'," + (iCount + 1) + ",null," + c.intWidth + "," + c.intHeight + "," + c.intImageZoom + "," + c.intTextSize + ",null)";
                    try {
                        objDBHSQ.fnInsertQuery("one", strQuery);
                    } catch (SQLException ex) {
                        Logger.getLogger(IntFrmDiaryReport.class.getName()).log(Level.SEVERE, null, ex);
                        ClsGUIContainers.self(objMainFrom.txtLogs).fnDisplayError("Database Open Error : " + ex.getMessage(), "", "");
                    }
                }
            }
        }
        //fnReloadEvent(obj);
    }

    @Override
    public void fnClearEvent(ClsToolbarOperation obj, int intSubCmd_1, int intSubCmd_2) {

    }

    @Override
    public void fnCancelEvent(ClsToolbarOperation obj, int intSubCmd_1, int intSubCmd_2) {
        fnDMLEnblDsblCtrls(true);
        if (pnl.ACTIVE_SAVE_MODE == pnl.ADD_SAVE_MODE) {
            dlmListText.removeElementAt(dlmListText.size() - 1);
        }
        lstTopicsMouseClicked(null);
    }

    @Override
    public void fnCloseEvent(ClsToolbarOperation obj, int intSubCmd_1, int intSubCmd_2) {
        this.doDefaultCloseAction();
    }

    private boolean fnWhenClose() {
        if (pnl.ACTIVE_SAVE_MODE == pnl.ADD_SAVE_MODE || pnl.ACTIVE_SAVE_MODE == pnl.EDIT_SAVE_MODE) {
            if (JOptionPane.showConfirmDialog(this, "Unsaved data is there. Do you want to close?", "Close", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
                return true;
            } else {
                return false;
            }
        }
        return true;
    }

    @Override
    public void fnDeleteRecordEvent(ClsToolbarOperation obj, int intSubCmd_1, int intSubCmd_2) {
        if ((JOptionPane.showConfirmDialog(this, "Do you want to delete the selected topic?", "Topic Deletion", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE)) == JOptionPane.YES_OPTION) {
            try {
                objDBHSQ.fnDeleteQuery("one", "update tbl_topic_temp set row_state_1 = -1, row_state_2 = -1 where tbl_id = " + arlTopicId.get(lstTopics.getSelectedIndex()));
            } catch (SQLException ex) {
                Logger.getLogger(IntFrmDiaryReport.class.getName()).log(Level.SEVERE, null, ex);
                ClsGUIContainers.self(objMainFrom.txtLogs).fnDisplayError("Database Open Error : " + ex.getMessage(), "", "");
            }
            dlmListText.remove(lstTopics.getSelectedIndex());
            fnRemoveAllContents();
            if (dlmListText.size() != 0) {
                lstTopics.setSelectedIndex(0);
                lstTopicsMouseClicked(null);
            }
        }
    }
}

class clsEdit {

    static final int CONTENT = 1;
    static final int TOPIC_ORDER = 2;
    static final int TOPIC = 3;
    static final int GROUP_MAPPING = 4;

}
